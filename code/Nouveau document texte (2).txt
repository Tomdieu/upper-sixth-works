#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <conio.h>
#include<time.h>
#include<ctype.h>
#include <time.h>
#include <windows.h>
#include <process.h>

#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77

struct coordinate{    
int X;    
int Y;    
int direction;
};

typedef struct coordinate coordinate;

coordinate head, apple, sBody;

int body[500];
int gameOver=0;
int appleEaten=0;
int life=3;

int main()
{    
setXY(2,2);    
printf("Remaining Lives");    
apple.X = 0;    
apple.Y = 0;    
boarderDraw();    
spawnSnake();    
move();
}

void boarderDraw()
{
setXY(2,2);    
printf("Remaining Lives: ");    
setXY(19,2);    
printf("%d", life);   
int i;    
for(i=5; i<81; i++)   
 {        
setXY(i,5);        
printf("~");        
setXY(i,30);        
printf("~");    
}    
for(i=5; i<31; i++)    
{        
setXY(5,i);        
printf("|");        
setXY(80,i);        
printf("|");    
}
}

void spawnSnake()
{    
int x=81/2;    
int y=31/2;    
head.X = x;    
head.Y = y;    
head.direction = RIGHT;    
setXY(x,y);   
printf(">");
}

void move(){    
endGame();    
boarderDraw();    
food();    
printBody();
char input;

while(!kbhit())
{
int localDir;
localDir=head.direction;

if(localDir==LEFT)
{    
endGame();    
boarderDraw();    
system("cls");    
head.X--;    
boarderDraw();    
food();    
setXY(head.X,head.Y);    
printf("<");    
eat();    
printBody();
}

else if(localDir==RIGHT)
{    
endGame();    
boarderDraw();    
system("cls");   
head.X++;    
boarderDraw();   
food();    
setXY(head.X,head.Y);    
printf(">");   
eat();    
printBody();
}
else if(localDir==UP)
{    
endGame();    
boarderDraw();    
system("cls");    
head.Y--;   
boarderDraw();    
food();   
setXY(head.X,head.Y);    
printf("^");    
eat();    
printBody();
}
else
{    
endGame();   
boarderDraw();    
system("cls");    
head.Y++;    
boarderDraw();    
food();    
setXY(head.X,head.Y);    
printf("v");    
eat();    
printBody();
}
}
if(kbhit())     
{        
endGame();         
while(gameOver==0)         
{         
input = getch();         //Change INPUT to desired direction.         
if(input == UP)         
{             
up();         
}         
if(input == DOWN)        
 {             
down();         
}         
if(input == LEFT)         
{             
left();         
}         
if(input == RIGHT)         
{             
right();         
}         
else if(gameOver==1)         
{             
system("cls");         
}     
else if(input == 27)     
{         
gameOver=1;        
 system("cls");        
 exit(0);     
}     
}
}
}

void goToXY(int x, int y)
{    
COORD coord;    
coord.X = x;
coord.Y = y;    
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void setXY(int x, int y)
{    
HANDLE h; //undefined pointer h   
COORD c;    
fflush(stdout);    
c.X = x;   
c.Y = y;    
h = GetStdHandle(STD_OUTPUT_HANDLE);    
SetConsoleCursorPosition(h,c);
}

void up()
{   
 eat();        
if (head.direction!=DOWN)        
{        
head.direction=UP;        
head.Y--;       
 system("cls");        
boarderDraw();        
setXY(head.X,head.Y);        
printf("^");       
 endGame();        
move();        
food();        
printBody();        
}       
 else
{            
endGame();            
move();            
food();        
}
}

void down()
{    
eat();        
if (head.direction!=UP)        
{        
head.direction=DOWN;        
head.Y++;       
 system("cls");        
boarderDraw();        
setXY(head.X,head.Y);        
printf("v");        
endGame();        
move();        
food();        
printBody();        
}        
else
{            
endGame();            
move();           
food();        
}
}

void left()
{    
eat();    
if (head.direction!=RIGHT)        
{        
head.direction=LEFT;        
head.X--;       
 system("cls");        
boarderDraw();        
setXY(head.X,head.Y);        
printf("<");        
endGame();        
move();        
food();       
 printBody();        
}       
 else
{            
endGame();            
move();            
food();        
}
}

void right()
{        
eat();        
if (head.direction!=LEFT)        
{        
head.direction=RIGHT;        
head.X++;       
 system("cls");       
 boarderDraw();        
setXY(head.X,head.Y);        
printf(">");        
endGame();        
move();        
food();       
 printBody();        
}        
else
{            
endGame();           
 move();           
 food();        
}
}

void food()
{   
if(apple.X==0 && apple.Y==0)
{
int rx = ((rand() % 74 + 5));
int ry = ((rand() % 24 + 5));
apple.X=rx;
apple.Y=ry;
setXY(apple.X, apple.Y);
printf("A");
}    
else    
{        
setXY(apple.X, apple.Y);        
printf("A");    
}
}

void eat()
{    
if((head.X == apple.X) && (head.Y == apple.Y))        
{            
appleEaten++;            
apple.X=0;           
 apple.Y=0;            
body[appleEaten]=0;        
}        
/*for(int i=0;i<appleEaten;i++)            
{                
setXY(head.X, (head.Y));                
printf("%d", body[i]);                
food();                
move();            
}
*/
}

void printBody()
{    
if (head.direction == RIGHT)    
{        
for(int i=1;i<=appleEaten;i++)            
{                
sBody.X=(head.X-i);                
sBody.Y=(head.Y);                
setXY(sBody.X, sBody.Y);                
printf("%d", body[i]);            
}    
}    
else 
if (head.direction == LEFT)    
{        
for(int i=1;i<=appleEaten;i++)            
{                
sBody.X=(head.X+i);                
sBody.Y=(head.Y);                
setXY(sBody.X, sBody.Y);                
printf("%d", body[i]);           
}    
}    
else If (head.direction == UP)    
{        
for(int i=1;i<=appleEaten;i++)           
{                
sBody.X=(head.X);               
sBody.Y=(head.Y+i);                
setXY(sBody.X, sBody.Y);                
printf("%d", body[i]);            
}    
}    
else if (head.direction == DOWN)    
{        
for(int i=1;i<=appleEaten;i++)            
{                
sBody.X=(head.X);                
sBody.Y=(head.Y-i);                
setXY(sBody.X, sBody.Y);                
printf("%d", body[i]);            
}    
}
}

void endGame()
{    
if(head.X<=5||head.X>=81||head.Y<=5||head.Y>=30)   
 {        
life--;        
system("cls");        
appleEaten=0;        
main();    
}    
else    
{        
gameOver=0;    
}    
if(life==0)   
{
gameOver=1;        
system("cls");        
exit(0);    
}
}

















#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>
 
#include <windows.h>
#include <conio.h>
#include <process.h>
 
#define UP    72
#define DOWN  80
#define LEFT  75
#define RIGHT 77
 
struct coordinate {
    int X;
    int Y;
    int direction;
};
 
typedef struct coordinate coordinate;
 
coordinate head, apple, sBody;
 
int body[500];
int gameOver = 0;
int appleEaten = 0;
int life = 3;
 
int main() {
    setXY(2, 2);
    printf("Remaining Lives");
    apple.X = 0;
    apple.Y = 0;
    boarderDraw();
    spawnSnake();
    move();
}
 
void boarderDraw() {
    setXY(2, 2);
    printf("Remaining Lives: ");
    setXY(19, 2);
    printf("%d", life);
    int i;
    for (i = 5; i < 81; i++) {
        setXY(i, 5);
        printf("~");
        setXY(i, 30);
        printf("~");
    }
    for (i = 5; i < 31; i++) {
        setXY(5, i);
        printf("|");
        setXY(80, i);
        printf("|");
    }
}
 
void spawnSnake() {
    int x = 81 / 2;
    int y = 31 / 2;
    head.X = x;
    head.Y = y;
    head.direction = RIGHT;
    setXY(x, y);
    printf(">");
}
 
void move() {
    endGame();
    boarderDraw();
    food();
    printBody();
    char input;
    while (!kbhit()) {
        int localDir;
        localDir = head.direction;
        if (localDir == LEFT) {
            endGame();
            boarderDraw();
            system("cls");
            head.X--;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("<");
            eat();
            printBody();
        }
        else if (localDir == RIGHT) {
            endGame();
            boarderDraw();
            system("cls");
            head.X++;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf(">");
            eat();
            printBody();
        } else if (localDir == UP) {
            endGame();
            boarderDraw();
            system("cls");
            head.Y--;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("^");
            eat();
            printBody();
        } else {
            endGame();
            boarderDraw();
            system("cls");
            head.Y++;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("v");
            eat();
            printBody();
        }
    }
    if (kbhit()) {
        endGame();
        while (gameOver == 0) {
            input = getch();    //Change INPUT to desired direction.         
            if (input == UP) {
                up();
            }
            if (input == DOWN) {
                down();
            }
            if (input == LEFT) {
                left();
            }
            if (input == RIGHT) {
                right();
            } else if (gameOver == 1) {
                system("cls");
            } else if (input == 27) {
                gameOver = 1;
                system("cls");
                exit(0);
            }
        }
    }
}
 
void goToXY(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
 
void setXY(int x, int y) {
    COORD c;
    fflush(stdout);
    c.X = x;
    c.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}
 
void up() {
    eat();
    if (head.direction != DOWN) {
        head.direction = UP;
        head.Y--;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("^");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void down() {
    eat();
    if (head.direction != UP) {
        head.direction = DOWN;
        head.Y++;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("v");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void left() {
    eat();
    if (head.direction != RIGHT) {
        head.direction = LEFT;
        head.X--;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("<");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void right() {
    eat();
    if (head.direction != LEFT) {
        head.direction = RIGHT;
        head.X++;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf(">");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void food() {
    if (apple.X == 0 && apple.Y == 0) {
        int rx = ((rand() % 74 + 5));
        int ry = ((rand() % 24 + 5));
        apple.X = rx;
        apple.Y = ry;
        setXY(apple.X, apple.Y);
        printf("A");
    } else {
        setXY(apple.X, apple.Y);
        printf("A");
    }
}
 
void eat() {
    if (head.X == apple.X && head.Y == apple.Y) {
        appleEaten++;
        apple.X = 0;
        apple.Y = 0;
        body[appleEaten] = 0;
    }
/*  for(int i=0;i<appleEaten;i++)            
    {                
        setXY(head.X, (head.Y));                
        printf("%d", body[i]);                
        food();                
        move();            
    }*/
}
 
void printBody() {
    if (head.direction == RIGHT) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X - i);
            sBody.Y = (head.Y);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    } else if (head.direction == LEFT) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X + i);
            sBody.Y = (head.Y);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    } else if(head.direction == UP) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X);
            sBody.Y = (head.Y + i);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    }
    else if (head.direction == DOWN) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X);
            sBody.Y = (head.Y - i);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    }
}
 
void endGame() {
    if (head.X <= 5 || head.X >= 81 || head.Y <= 5 || head.Y >= 30) {
        life--;
        system("cls");
        appleEaten = 0;
        main();
    } else {
        gameOver = 0;
    }
    if (life == 0) {
        gameOver = 1;
        system("cls");
        exit(0);
    }
}





#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>
 
#include <windows.h>
#include <conio.h>
#include <process.h>
 
#define UP    72
#define DOWN  80
#define LEFT  75
#define RIGHT 77
 
struct coordinate {
    int X;
    int Y;
    int direction;
};
 
typedef struct coordinate coordinate;
 
coordinate head, apple, sBody;
 
int body[500];
int gameOver = 0;
int appleEaten = 0;
int life = 3;
 
int main() {
    setXY(2, 2);
    printf("Remaining Lives");
    apple.X = 0;
    apple.Y = 0;
    boarderDraw();
    spawnSnake();
    move();
}
 
void boarderDraw() {
    setXY(2, 2);
    printf("Remaining Lives: ");
    setXY(19, 2);
    printf("%d", life);
    int i;
    for (i = 5; i < 81; i++) {
        setXY(i, 5);
        printf("~");
        setXY(i, 30);
        printf("~");
    }
    for (i = 5; i < 31; i++) {
        setXY(5, i);
        printf("|");
        setXY(80, i);
        printf("|");
    }
}
 
void spawnSnake() {
    int x = 81 / 2;
    int y = 31 / 2;
    head.X = x;
    head.Y = y;
    head.direction = RIGHT;
    setXY(x, y);
    printf(">");
}
 
void move() {
    endGame();
    boarderDraw();
    food();
    printBody();
    char input;
    while (!kbhit()) {
        int localDir;
        localDir = head.direction;
        if (localDir == LEFT) {
            endGame();
            boarderDraw();
            system("cls");
            head.X--;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("<");
            eat();
            printBody();
        }
        else if (localDir == RIGHT) {
            endGame();
            boarderDraw();
            system("cls");
            head.X++;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf(">");
            eat();
            printBody();
        } else if (localDir == UP) {
            endGame();
            boarderDraw();
            system("cls");
            head.Y--;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("^");
            eat();
            printBody();
        } else {
            endGame();
            boarderDraw();
            system("cls");
            head.Y++;
            boarderDraw();
            food();
            setXY(head.X, head.Y);
            printf("v");
            eat();
            printBody();
        }
    }
    if (kbhit()) {
        endGame();
        while (gameOver == 0) {
            input = getch();    //Change INPUT to desired direction.         
            if (input == UP) {
                up();
            }
            if (input == DOWN) {
                down();
            }
            if (input == LEFT) {
                left();
            }
            if (input == RIGHT) {
                right();
            } else if (gameOver == 1) {
                system("cls");
            } else if (input == 27) {
                gameOver = 1;
                system("cls");
                exit(0);
            }
        }
    }
}
 
void goToXY(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
 
void setXY(int x, int y) {
    COORD c;
    fflush(stdout);
    c.X = x;
    c.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}
 
void up() {
    eat();
    if (head.direction != DOWN) {
        head.direction = UP;
        head.Y--;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("^");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void down() {
    eat();
    if (head.direction != UP) {
        head.direction = DOWN;
        head.Y++;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("v");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void left() {
    eat();
    if (head.direction != RIGHT) {
        head.direction = LEFT;
        head.X--;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf("<");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void right() {
    eat();
    if (head.direction != LEFT) {
        head.direction = RIGHT;
        head.X++;
        system("cls");
        boarderDraw();
        setXY(head.X, head.Y);
        printf(">");
        endGame();
        move();
        food();
        printBody();
    } else {
        endGame();
        move();
        food();
    }
}
 
void food() {
    if (apple.X == 0 && apple.Y == 0) {
        int rx = ((rand() % 74 + 5));
        int ry = ((rand() % 24 + 5));
        apple.X = rx;
        apple.Y = ry;
        setXY(apple.X, apple.Y);
        printf("A");
    } else {
        setXY(apple.X, apple.Y);
        printf("A");
    }
}
 
void eat() {
    if (head.X == apple.X && head.Y == apple.Y) {
        appleEaten++;
        apple.X = 0;
        apple.Y = 0;
        body[appleEaten] = 0;
    }
/*  for(int i=0;i<appleEaten;i++)            
    {                
        setXY(head.X, (head.Y));                
        printf("%d", body[i]);                
        food();                
        move();            
    }*/
}
 
void printBody() {
    if (head.direction == RIGHT) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X - i);
            sBody.Y = (head.Y);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    } else if (head.direction == LEFT) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X + i);
            sBody.Y = (head.Y);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    } else if(head.direction == UP) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X);
            sBody.Y = (head.Y + i);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    }
    else if (head.direction == DOWN) {
        for (int i = 1; i <= appleEaten; i++) {
            sBody.X = (head.X);
            sBody.Y = (head.Y - i);
            setXY(sBody.X, sBody.Y);
            printf("%d", body[i]);
        }
    }
}
 
void endGame() {
    if (head.X <= 5 || head.X >= 81 || head.Y <= 5 || head.Y >= 30) {
        life--;
        system("cls");
        appleEaten = 0;
        main();
    } else {
        gameOver = 0;
    }
    if (life == 0) {
        gameOver = 1;
        system("cls");
        exit(0);
    }
}


#include <graphics.h>
#include <stdlib.h>
#include <stdio.h>
#include<malloc.h>
#include<dos.h>
#include <conio.h>

int xasp,yasp,gdriver = VGA, gmode=VGAMED, errorcode;

struct pos
{
	int x;
	int y;
};

struct face
{
	int radius;
	struct pos position;
	int mood;
};

typedef struct face face;
face *face1;

void getposition()
{
	printf("Enter X Co-ordinate:");
	scanf("%d",&face1->position.x);
	printf("Enter X Co-ordinate:");
	scanf("%d",&face1->position.y);
}

void drawface()
{

	char ch='x';
	int i=0,x,y,color,r,imgsize,dif;

	x=face1->position.x=320;
	y=face1->position.y=180;
	face1->radius=150;
	color=15;
	r=face1->radius;

	setbkcolor(0);
	getaspectratio(&xasp,&yasp);
	setcolor(8);
	circle(x,y,face1->radius);

	setfillstyle(1,color);
	floodfill(x,y,getcolor());


	draweyes(face1);
	drawhair(face1);
	drawmouth(face1);
	drawnose(face1);

}

drawnose()
{
	int i,x,y,r;
	x=face1->position.x;
	y=face1->position.y;
	r=face1->radius;
	setcolor(0);

	for(i=0;i<2;i++)
	{
		arc(x-160-i,y-r/4,340-i,10,r);
		line(x-20,y+4+i,x+20,y+10+i);
	}
}

draweyes()
{

	int i,x1,x2,y1,y2,r;
	setcolor(0);
	r=face1->radius;
	x1=face1->position.x-r/2;
	y1=face1->position.y-r/4;
	x2=face1->position.x+r/2;
	y2=face1->position.y-r/4;

	setaspectratio(xasp/2,yasp);
	arc(x1,y1-r/8,40,140,r/4);//left eyebrow
	arc(x1,y1-r/8+1,40,140,r/4);//left eyebrow
	arc(x1,y1-r/8+2,40,140,r/4);//left eyebrow
	setaspectratio(xasp,yasp);

	for(i=0;i<2;i++)
	{
		arc(x1,y1+i+5,40,140,r/4); //upper left eye
		arc(x1,y1-r/5+i,220,320,r/4); //lower left eye
	}
	circle(x1,y1-r/12,r/10);//left pupul
	setfillstyle(1,0);
	floodfill(x1,y1-r/10,getcolor());
	setfillstyle(1,WHITE);
	floodfill(x1-15,y1-r/6,getcolor());


	setaspectratio(xasp/2,yasp);
	arc(x2,y2-r/8,40,140,r/4);//right eyebrow
	arc(x2,y2-r/8+1,40,140,r/4);//right eyebrow
	arc(x2,y2-r/8+2,40,140,r/4);//right eyebrow

	setaspectratio(xasp,yasp);
	for(i=0;i<2;i++)
	{
		arc(x2,y2+i+5,40,140,r/4);//upper right eye
		arc(x2,y2-r/5+i,220,320,r/4);//lower right eye
	}

	circle(x2,y2-r/12,r/10);//right pupil
	setfillstyle(1,0);
	floodfill(x2,y2-r/12,getcolor());

	setfillstyle(1,WHITE);
	floodfill(x2-15,y2-r/6,getcolor());
}

drawmouth()
{
	int x,y,r,i;
	x=face1->position.x;
	y=face1->position.y+(face1->radius/1.5);
	r=face1->radius;
	setcolor(BLACK);

	if((face1->mood)==1)
		for(i=0;i<4;i++)
			arc(x,y-r/2+i,220,320,r/2);//make happy
	if((face1->mood)==0)
		for(i=0;i<4;i++)
			arc(x,y-i,40,140,r/2);//make sad
}

drawhair()
{       int x,y,r;
	setcolor(8);
	setaspectratio(xasp,yasp/1.5);
	r=face1->radius;
	x=face1->position.x-r/2;
	y=face1->position.y-r/3;

	arc(x,y,34,225,100);

	arc(x+r,y,314,138,100);

	setfillstyle(1,RED);
	floodfill(x,y-70,getcolor());
	floodfill(x+r,y-70,getcolor());
	setaspectratio(xasp,yasp);
}

void main(void)
{
	int i=0;
	initgraph(&gdriver, &gmode,"");

	while(!kbhit())
	{
		if((i%2)==1)
		{
			setvisualpage(1);
			setactivepage(0);
			clearviewport();
			face1->mood=0;
			drawface();
			delay(1000);
		}
		else
		{
			setvisualpage(0);
			setactivepage(1);
			clearviewport();
			face1->mood=1;
			drawface();
			delay(300);
		}
		i++;
	}

	getch();
	closegraph();
}